{"version":3,"file":"use-sound.cjs.development.js","sources":["../src/use-on-mount.ts","../src/index.ts"],"sourcesContent":["import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound<T = any>(\n  src: string | string[],\n  {\n    id,\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions<T> = {} as HookOptions\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n\n    // @ts-ignore\n    setSound(this);\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n        HowlConstructor.current = mod.Howl ?? mod.default.Howl;\n\n        isMounted.current = true;\n\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n\nexport { useSound };\n"],"names":["useOnMount","callback","React","useSound","src","id","volume","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","useRef","isMounted","useState","duration","setDuration","sound","setSound","handleLoad","call","current","then","mod","Howl","Array","isArray","rate","useEffect","JSON","stringify","play","useCallback","options","forceSoundEnabled","stop","pause","returnedValue"],"mappings":"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"}